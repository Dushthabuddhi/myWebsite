/**
 * Description: This class is used to start a thread
 * to receive data from ftp server through data socket
 * @author Guojun Zhang
 **/
package ftp.client;

import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

import ftp.config.Settings;
import ftp.file.LocalDirectory;
import ftp.io.DataSocketObjectInputStream;
import ftp.message.FtpLogger;
import ftp.message.JTextAreaOutput;

public class DataAccepter extends Thread implements Settings {

	private JTextAreaOutput log = FtpLogger.getLog();
	private Socket socket;
	private DataSocketObjectInputStream objIn;
	private InputStream streamIn;
	private ArrayList<File> files;
	private boolean running;
	private int mode;
	private String destDir;
	private String sourceFile;
	private static Object lock = new Object();

	/**
	 * Download and directory list mode specifier constructor
	 * @param mode
	 */
	public DataAccepter(int mode) {
		running = true;
		this.mode = mode;
	}
	
	/**
	 * Download and directory list mode specifier constructor
	 * @param mode
	 * @param sourceFile
	 * @param destDir
	 */
	public DataAccepter(int mode, String sourceFile, String destDir) {
		this(mode);
		this.destDir = destDir;
		this.sourceFile = sourceFile;

	}

	/**
	 * Synchronizing client and server sockets and reading the file and directory list
	 */
	public void run() {
		try {
			synchronized (lock) {
				ServerSocket sSocket = new ServerSocket(DATASOCKET_PORT);
				socket = sSocket.accept();
				sSocket.close();
			}

			switch (mode) {
			case DIR_LIST:
				readDir();
				break;
			case FILE_DOWNLOAD:
				readFile();
			}

			while (running) {
				Thread.sleep(1000);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}

	/**
	 * function to stop the thread
	 */
	public void stopThread() {
		running = false;
	}

	/**
	 * function to return the files in arrayList
	 * @return
	 */
	public ArrayList<File> getFiles() {
		return files;
	}

	/**
	 * reads the directory information from data socket input stream file
	 * information is transmitted through object stream
	 */
	private void readDir() {

		try {
			objIn = new DataSocketObjectInputStream(new ObjectInputStream(
					socket.getInputStream()));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		files = new ArrayList<File>();
		File file;

		try {
			while ((file = (File) objIn.readObject()) != null) {
				files.add(file);
			}
		} catch (EOFException e) {

		} catch (IOException e) {
			log.error("Failed to receive directory information from server");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}

	}

	/**
	 * reads file information from data socket input stream file information is
	 * transmitted through object stream
	 */
	private void readFile() {

		try {
			streamIn = (socket.getInputStream());
			File file = new File(destDir + sourceFile);
			FileOutputStream fileIn;
			if (file != null) {
				fileIn = new FileOutputStream(file);
				int data;
				while ((data = streamIn.read()) != -1) {
					fileIn.write(data);
				}
				fileIn.flush();
				fileIn.close();
				log
						.status("The file " + sourceFile
								+ " is downloaded to " + destDir);
				LocalDirectory.refresh();
			} else {
				System.out.println("Fail to create new file " + destDir + sourceFile);
				log.error("Fail to create new file " + destDir + sourceFile);
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
