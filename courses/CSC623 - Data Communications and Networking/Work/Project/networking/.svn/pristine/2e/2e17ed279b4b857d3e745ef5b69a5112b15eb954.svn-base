/**
 * This class is used to display local and remote files
 * on FTP client GUI
 * @author: Hardi and Jing Zhao 
 **/
package ftp.gui.component;

import java.awt.Point;
import java.awt.Rectangle;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.Timestamp;

import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class FileTable extends JTable {

	private DefaultListModel model = new DefaultListModel();
	private int count = 0;
	private JTable table;
	private DefaultTableModel tableModel;

	public FileTable(final TableModel model) {
		super(model);
		setDragEnabled(true);
		setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		setDropMode(DropMode.INSERT_ROWS);
		setTransferHandler(new TransferHandler() {

			public boolean canImport(TransferSupport support) {
				// for the demo, we'll only support drops (not clipboard paste)
				if (!support.isDrop()) {
					return false;
				}

				// we only import Strings
				if (!support.isDataFlavorSupported(DataFlavor.stringFlavor)) {
					return false;
				}

				return true;
			}

			public boolean importData(TransferSupport support) {
				// if we can't handle the import, say so
				if (!canImport(support)) {
					return false;
				}

				// fetch the drop location
				JTable.DropLocation dl = (JTable.DropLocation) support
						.getDropLocation();

				int row = dl.getRow();

				// fetch the data and bail if this fails
				String data;
				try {
					data = (String) support.getTransferable().getTransferData(
							DataFlavor.stringFlavor);
				} catch (UnsupportedFlavorException e) {
					return false;
				} catch (IOException e) {
					return false;
				}

				String[] rowData = data.split(",");
				tableModel.insertRow(row, rowData);

				Rectangle rect = table.getCellRect(row, 0, false);
				if (rect != null) {
					table.scrollRectToVisible(rect);
				}

				// demo stuff - remove for blog
				((DefaultListModel) model).removeAllElements();
				((DefaultListModel) model).insertElementAt(getNextString(count++), 0);
				// end demo stuff

				return true;
			}

			private Object getNextString(int count) {
				StringBuffer buf = new StringBuffer();
				for (int i = 0; i < 5; i++) {
					buf.append(String.valueOf(count));
					buf.append(",");
				}

				// remove last newline
				buf.deleteCharAt(buf.length() - 1);
				return buf.toString();
			}
		});

	}
	
//	public String getToolTipText(MouseEvent e) {
//		String tip = null;
//		Point point = e.getPoint();
//		int rowIndex = rowAtPoint(point);
//        int colIndex = columnAtPoint(point);
//        int realColumnIndex = convertColumnIndexToModel(colIndex);
//        TableModel model = getModel();
//        if(realColumnIndex == 2)
//        	tip = ((Integer)model.getValueAt(rowIndex, colIndex)).toString();
//        else if(realColumnIndex == 4)
//        tip = ((Timestamp)model.getValueAt(rowIndex, colIndex)).toString();
//        else
//        	tip =(String)model.getValueAt(rowIndex, colIndex);
//
//		return tip;
//
//	}


}
