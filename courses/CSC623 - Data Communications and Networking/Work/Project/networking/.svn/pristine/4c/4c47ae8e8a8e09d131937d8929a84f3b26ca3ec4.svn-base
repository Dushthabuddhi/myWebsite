/**
 * Class action listener for the connection button on GUI.
 * @author Jing Zhao
 **/
package ftp.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import javax.swing.JTextField;

import ftp.client.FtpCmdSession;
import ftp.client.FtpConnector;
import ftp.config.Settings;
import ftp.file.UnhideFileFilter;
import ftp.message.FtpLogger;
import ftp.message.JTextAreaOutput;

public class DirChangeListener implements ActionListener, MouseListener,
		Settings {

	private JTextAreaOutput log = FtpLogger.getLog();
	private FileTable table;
	private FileTableModel model;
	private boolean isLocal;
	private String curDir;
	private JTextField dirField;

	public DirChangeListener(FileTable table, boolean isLocal,
			JTextField dirField) {
		this.table = table;
		this.model = (FileTableModel) table.getModel();
		this.isLocal = isLocal;
		this.dirField = dirField;
		this.curDir = dirField.getText();
	}

	/*
	 * action listener for JTextField
	 * changes the current working directory when user puts the 
	 * new directory into JTextField and presses Enter.
	 */
	public void actionPerformed(ActionEvent e) {

		String newDir = e.getActionCommand();
		cwd(newDir);
	}

	/*
	 * action listener for double clicking the directory on the table
	 * the current working directory changes
	 */
	public void mouseClicked(MouseEvent e) {
		if (e.getClickCount() == 2) {
			int row = table.rowAtPoint(e.getPoint());
			if (isLocal)
				curDir = winFormat(curDir);
			else
				curDir = unixFormat(curDir);
			String newDir = curDir + (String) table.getValueAt(row, 1);
			cwd(newDir);
		}

	}

	/*
	 * changes the current working directory
	 */
	private void cwd(String newDir) {
		// if the event is from local file panel
		if (isLocal) {
			File dir = new File(newDir);
			if (dir.exists() && dir.isDirectory()) {
				curDir = winFormat(newDir);
				dir = new File(curDir);
				FileFilter filter = new UnhideFileFilter();
				model.resetTableModel(dir.listFiles(filter));
				table.setModel(model);
				table.repaint();
				log.status("changed to directory " + curDir);

			} else {
				log.error("No such directory");
			}
			dirField.setText(curDir);
		}
		// else if the event is from remote file panel
		else {
			FtpConnector conn = FtpCmdSession.getConnSession();

			File[] files;
			try {
				if (conn.cwd(newDir)) {
					curDir = unixFormat(newDir);
					dirField.setText(curDir);
					files = conn.list();
					FileTableModel model = (FileTableModel) table.getModel();
					model.resetTableModel(files);
					table.setModel(model);
					table.repaint();
				} 
			} catch (IOException e) {
				log.error("IO exception");
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

		}

	}


	/*
	 * formats the Windows file system path
	 */
	private String winFormat(String dir) {
		dir = dir.replace(UNIX_SEPARATOR, WIN_SEPARATOR);
		if (dir.charAt(dir.length() - 1) != WIN_SEPARATOR) {
			dir += WIN_SEPARATOR;
		}
		int endIndex = dir.indexOf(WIN_SEPARATOR + PARENT);
		if (endIndex > 0) {
			dir = dir.substring(0, endIndex);
			endIndex = dir.lastIndexOf(WIN_SEPARATOR);
			dir = dir.substring(0, endIndex + 1);
		}
		endIndex = dir.indexOf(CURRENT + WIN_SEPARATOR);
		if (endIndex > 0) {
			dir = dir.substring(0, endIndex);
		}
		return dir;
	}

	/*
	 * formats the Unix file system path
	 */
	private String unixFormat(String dir) {
		dir = dir.replace(WIN_SEPARATOR, UNIX_SEPARATOR);
		if (dir.charAt(dir.length() - 1) != UNIX_SEPARATOR) {
			dir += UNIX_SEPARATOR;
		}
		int endIndex = dir.indexOf(UNIX_SEPARATOR + PARENT);
		if (endIndex > 0) {
			dir = dir.substring(0, endIndex);
			endIndex = dir.lastIndexOf(UNIX_SEPARATOR);
			dir = dir.substring(0, endIndex + 1);
		}
		endIndex = dir.indexOf(CURRENT + UNIX_SEPARATOR);
		if (endIndex > 0) {
			dir = dir.substring(0, endIndex);
		}
		return dir;
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

}
