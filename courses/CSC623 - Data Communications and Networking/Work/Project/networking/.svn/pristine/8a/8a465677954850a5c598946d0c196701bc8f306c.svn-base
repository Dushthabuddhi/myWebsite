package ftp.file;

import java.io.File;
import java.io.IOException;

import javax.swing.JTextField;

import ftp.client.FtpCmdSession;
import ftp.client.FtpConnector;
import ftp.config.Settings;
import ftp.gui.component.FileTable;
import ftp.gui.component.FileTableModel;
import ftp.message.FtpLogger;
import ftp.message.JTextAreaOutput;

public class RemoteDirectory implements Settings{
	private static JTextField curDir;
	private static FileTable fileTable;
	private static JTextAreaOutput log = FtpLogger.getLog();

	public static void setCurDir(JTextField curText) {
		curDir = curText;
	}

	public static void setFileTable(FileTable table) {
		fileTable = table;
	}

	public static void refresh() {
		System.out.println("RemoteDirectory, " + curDir.getText());
		FtpConnector conn = FtpCmdSession.getConnSession();

		if(conn != null){
			File[] files;
			try {
				files = conn.list();
				FileTableModel model = (FileTableModel) fileTable.getModel();
				model.resetTableModel(files);
//				fileTable.setModel(model);
				fileTable.repaint();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	}
	
	/*
	 * changes the current working directory for local
	 * file system
	 */
	public static String cwd(String newDir) {

		String current = curDir.getText();

		FtpConnector conn = FtpCmdSession.getConnSession();

		File[] files;
		try {
			if (conn.cwd(newDir)) {
				System.out.println("RemoteDirectory, list " +newDir );
				current = unixFormat(newDir);
				curDir.setText(current);
				files = conn.list();
				FileTableModel model = (FileTableModel) fileTable.getModel();
				model.resetTableModel(files);
//				fileTable.setModel(model);
				fileTable.repaint();
			}
		} catch (IOException e) {
			log.error("IO exception");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		return current;

	}

	/*
	 * formats the Windows file system path
	 */
	public static String winFormat(String dir) {
		dir = dir.replace(UNIX_SEPARATOR, WIN_SEPARATOR);
		if (dir.charAt(dir.length() - 1) != WIN_SEPARATOR) {
			dir += WIN_SEPARATOR;
		}
		int endIndex = dir.indexOf(WIN_SEPARATOR + PARENT);
		if (endIndex > 0) {
			dir = dir.substring(0, endIndex);
			endIndex = dir.lastIndexOf(WIN_SEPARATOR);
			dir = dir.substring(0, endIndex + 1);
		}
		endIndex = dir.indexOf(CURRENT + WIN_SEPARATOR);
		if (endIndex > 0) {
			dir = dir.substring(0, endIndex);
		}
		return dir;
	}

	/*
	 * formats the Unix file system path
	 */
	public static String unixFormat(String dir) {
		dir = dir.replace(WIN_SEPARATOR, UNIX_SEPARATOR);
		if (dir.charAt(dir.length() - 1) != UNIX_SEPARATOR) {
			dir += UNIX_SEPARATOR;
		}
		int endIndex = dir.indexOf(UNIX_SEPARATOR + PARENT);
		if (endIndex > 0) {
			dir = dir.substring(0, endIndex);
			endIndex = dir.lastIndexOf(UNIX_SEPARATOR);
			dir = dir.substring(0, endIndex + 1);
		}
		endIndex = dir.indexOf(CURRENT + UNIX_SEPARATOR);
		if (endIndex > 0) {
			dir = dir.substring(0, endIndex);
		}
		return dir;
	}

}
